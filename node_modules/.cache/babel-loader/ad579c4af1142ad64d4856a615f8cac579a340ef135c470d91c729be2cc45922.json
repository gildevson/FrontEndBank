{"ast":null,"code":"// Função auxiliar para verificar a resposta do servidor\nasync function checkResponse(response) {\n  const errorData = await response.json();\n  if (!response.ok) {\n    if (response.status === 409) {\n      throw new Error('Usuário já existe.');\n    }\n    throw new Error(errorData.message || response.statusText);\n  }\n  return errorData;\n}\n\n// Função para criar usuário\nexport async function createUser(user) {\n  try {\n    const response = await fetch('http://localhost:3000/api/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    return await checkResponse(response);\n  } catch (error) {\n    console.error('Erro ao criar usuário:', error);\n    throw error;\n  }\n}\n\n// Função para buscar usuários\nexport async function fetchUsers() {\n  try {\n    const response = await fetch('http://localhost:3000/api/users', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    return await checkResponse(response);\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error);\n    throw error;\n  }\n}\n\n// Função para deletar um usuário\nexport async function deleteUser(userId) {\n  try {\n    const response = await fetch(`http://localhost:3000/api/users/${userId}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    return await checkResponse(response);\n  } catch (error) {\n    console.error('Erro ao excluir usuário:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["checkResponse","response","errorData","json","ok","status","Error","message","statusText","createUser","user","fetch","method","headers","body","JSON","stringify","error","console","fetchUsers","deleteUser","userId"],"sources":["C:/Ferramenta_Suporte/frontend/src/services/userService.js"],"sourcesContent":["// Função auxiliar para verificar a resposta do servidor\r\nasync function checkResponse(response) {\r\n    const errorData = await response.json();\r\n    if (!response.ok) {\r\n        if (response.status === 409) {\r\n            throw new Error('Usuário já existe.');\r\n        }\r\n        throw new Error(errorData.message || response.statusText);\r\n    }\r\n    return errorData;\r\n}\r\n\r\n// Função para criar usuário\r\nexport async function createUser(user) {\r\n    try {\r\n        const response = await fetch('http://localhost:3000/api/users', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(user),\r\n        });\r\n\r\n        return await checkResponse(response);\r\n    } catch (error) {\r\n        console.error('Erro ao criar usuário:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Função para buscar usuários\r\nexport async function fetchUsers() {\r\n    try {\r\n        const response = await fetch('http://localhost:3000/api/users', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        return await checkResponse(response);\r\n    } catch (error) {\r\n        console.error('Erro ao buscar usuários:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Função para deletar um usuário\r\nexport async function deleteUser(userId) {\r\n    try {\r\n        const response = await fetch(`http://localhost:3000/api/users/${userId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        return await checkResponse(response);\r\n    } catch (error) {\r\n        console.error('Erro ao excluir usuário:', error);\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA,eAAeA,aAAaA,CAACC,QAAQ,EAAE;EACnC,MAAMC,SAAS,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EACvC,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IACd,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACzC;IACA,MAAM,IAAIA,KAAK,CAACJ,SAAS,CAACK,OAAO,IAAIN,QAAQ,CAACO,UAAU,CAAC;EAC7D;EACA,OAAON,SAAS;AACpB;;AAEA;AACA,OAAO,eAAeO,UAAUA,CAACC,IAAI,EAAE;EACnC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMU,KAAK,CAAC,iCAAiC,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;IAC7B,CAAC,CAAC;IAEF,OAAO,MAAMV,aAAa,CAACC,QAAQ,CAAC;EACxC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ;;AAEA;AACA,OAAO,eAAeE,UAAUA,CAAA,EAAG;EAC/B,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAMU,KAAK,CAAC,iCAAiC,EAAE;MAC5DC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,OAAO,MAAMb,aAAa,CAACC,QAAQ,CAAC;EACxC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ;;AAEA;AACA,OAAO,eAAeG,UAAUA,CAACC,MAAM,EAAE;EACrC,IAAI;IACA,MAAMpB,QAAQ,GAAG,MAAMU,KAAK,CAAC,mCAAmCU,MAAM,EAAE,EAAE;MACtET,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,OAAO,MAAMb,aAAa,CAACC,QAAQ,CAAC;EACxC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}