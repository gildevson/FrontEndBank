{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ferramenta_Suporte\\\\frontend\\\\src\\\\index.js\";\n// Primeiro bloco de código usando a biblioteca 'postgres'\nconst postgres = require('postgres');\nrequire('dotenv').config();\nlet {\n  PGHOST,\n  PGDATABASE,\n  PGUSER,\n  PGPASSWORD,\n  ENDPOINT_ID\n} = process.env;\nPGPASSWORD = decodeURIComponent(PGPASSWORD);\nconst sql = postgres({\n  host: PGHOST,\n  database: PGDATABASE,\n  username: PGUSER,\n  password: PGPASSWORD,\n  port: 5432,\n  ssl: 'require',\n  connection: {\n    options: `project=${ENDPOINT_ID}`\n  }\n});\n\n// Função para obter a versão do PostgreSQL\nasync function getPgVersion() {\n  const result = await sql`select version()`;\n  console.log(result);\n}\n\n// Chamada da função para testar a conexão\ngetPgVersion();\n\n// Segundo bloco de código usando a biblioteca 'pg'\nconst express = require('express');\nconst cors = require('cors');\nconst authRoutes = require('./src/routes/authRoutes'); // Ajuste o caminho conforme necessário\nconst {\n  Pool\n} = require('pg');\nconst userRoutes = require('./src/routes/userRoutes');\n\n// Inicializando o Express\nconst app = express();\n\n// Middleware para habilitar CORS e permitir JSON no corpo da requisição\napp.use(cors());\napp.use(express.json());\napp.use('/api', userRoutes);\n\n// Conexão com o banco de dados usando 'pg'\nconst pool = new Pool({\n  host: PGHOST,\n  user: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  port: process.env.PGPORT || 5432,\n  ssl: {\n    rejectUnauthorized: false\n  }\n});\n\n// Rota principal para testes\napp.get('/', (req, res) => {\n  res.send('Servidor está rodando!');\n});\n\n// Usando as rotas de autenticação\napp.use('/auth', authRoutes);\n\n// Iniciando o servidor\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Servidor rodando na porta ${PORT}`);\n});\n\n// Ajuste o caminho conforme necessário\n//------------------------------------------------\n\napp.use(bodyParser.json());\n\n// Rota para criar um usuário\napp.post('/api/users', (req, res) => {\n  console.log(req.body); // Isto irá mostrar os dados recebidos no console do servidor\n  res.status(201).send({\n    message: \"User created successfully\",\n    user: req.body\n  });\n});\n\n// O servidor está ouvindo na porta 3001\napp.listen(3001, () => console.log('Server running on http://localhost:3001'));\nimport React from 'react';\nimport { createRoot } from 'react-dom/client'; // Importando de react-dom/client\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Criar a raiz do React usando createRoot\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 96,\n  columnNumber: 5\n}, this));","map":{"version":3,"names":["postgres","require","config","PGHOST","PGDATABASE","PGUSER","PGPASSWORD","ENDPOINT_ID","process","env","decodeURIComponent","sql","host","database","username","password","port","ssl","connection","options","getPgVersion","result","console","log","express","cors","authRoutes","Pool","userRoutes","app","use","json","pool","user","PGPORT","rejectUnauthorized","get","req","res","send","PORT","listen","bodyParser","post","body","status","message","React","createRoot","App","jsxDEV","_jsxDEV","root","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Ferramenta_Suporte/frontend/src/index.js"],"sourcesContent":["// Primeiro bloco de código usando a biblioteca 'postgres'\nconst postgres = require('postgres');\nrequire('dotenv').config();\n\nlet { PGHOST, PGDATABASE, PGUSER, PGPASSWORD, ENDPOINT_ID } = process.env;\nPGPASSWORD = decodeURIComponent(PGPASSWORD);\n\nconst sql = postgres({\n  host: PGHOST,\n  database: PGDATABASE,\n  username: PGUSER,\n  password: PGPASSWORD,\n  port: 5432,\n  ssl: 'require',\n  connection: {\n    options: `project=${ENDPOINT_ID}`,\n  },\n});\n\n// Função para obter a versão do PostgreSQL\nasync function getPgVersion() {\n  const result = await sql`select version()`;\n  console.log(result);\n}\n\n// Chamada da função para testar a conexão\ngetPgVersion();\n\n// Segundo bloco de código usando a biblioteca 'pg'\nconst express = require('express');\nconst cors = require('cors');\nconst authRoutes = require('./src/routes/authRoutes'); // Ajuste o caminho conforme necessário\nconst { Pool } = require('pg');\nconst userRoutes = require('./src/routes/userRoutes'); \n\n\n\n// Inicializando o Express\nconst app = express();\n\n// Middleware para habilitar CORS e permitir JSON no corpo da requisição\napp.use(cors());\napp.use(express.json());\napp.use('/api', userRoutes);\n\n// Conexão com o banco de dados usando 'pg'\nconst pool = new Pool({\n    host: PGHOST,\n    user: PGUSER,\n    password: PGPASSWORD,\n    database: PGDATABASE,\n    port: process.env.PGPORT || 5432,\n    ssl: { rejectUnauthorized: false }\n});\n\n// Rota principal para testes\napp.get('/', (req, res) => {\n    res.send('Servidor está rodando!');\n});\n\n// Usando as rotas de autenticação\napp.use('/auth', authRoutes);\n\n// Iniciando o servidor\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Servidor rodando na porta ${PORT}`);\n});\n\n\n // Ajuste o caminho conforme necessário\n//------------------------------------------------\n\n\napp.use(bodyParser.json());\n\n// Rota para criar um usuário\napp.post('/api/users', (req, res) => {\n    console.log(req.body); // Isto irá mostrar os dados recebidos no console do servidor\n    res.status(201).send({ message: \"User created successfully\", user: req.body });\n});\n\n// O servidor está ouvindo na porta 3001\napp.listen(3001, () => console.log('Server running on http://localhost:3001'));\n import React from 'react';\nimport { createRoot } from 'react-dom/client'; // Importando de react-dom/client\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n// Criar a raiz do React usando createRoot\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}